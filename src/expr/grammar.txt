program: [item]* EOF
item: [function] | [struct]
function: FN [type] IDENTIFIER LEFT_PAREN [type identifier]* RIGHT_PAREN [block]
statement: [declaration] | [assignment] | [for] | [while] | [break] | [putc]
expression: [loop] | [if] | [alloc] | [getc] | [block]
inline_expression: [condition]
declaration: LET [type] IDENTIFIER ASSIGNMENT [expression]? SEMICOLON
assignment: [var] ASSIGNMENT [expression] SEMICOLON
for: FOR LEFT_PAREN STATEMENT STATEMENT STATEMENT RIGHT_PAREN [block]
while: WHILE LEFT_PAREN [inline_expression] RIGHT_PAREN [block]
break: BREAK [expression]? SEMICOLON
loop: LOOP [block]
if: IF LEFT_PAREN [inline_expression] RIGHT_PAREN [block] [elif]* [else]?
elif: ELSE IF LEFT_PAREN [inline_expression] RIGHT_PAREN [block]
else: ELSE [block]
alloc: ALLOC [type] LEFT_SQUARE INT_LITERAL RIGHT_SQUARE
block: LEFT_CURLY [statement]+ [expression]? RIGHT_CURLY | struct_initializer
struct_initializer: IDENTIFIER LEFT_CURLY [member_intializer] (COMMA, [member_intializer])* RIGHT_CURLY | [inline_expression]
member_intializer: IDENTIFIER COLON [inline_expression]
condition: [boolean_factor] (OR [boolean_factor])*
boolean_factor: [comparison] (AND [comparison])*
comparison: [arithmetic_term] ([comparator] [arithmetic_term])?
comparator: LESS | LESS_EQUAL | EQUAL | NOT_EQUAL | GREATER | GREATER_EQUAL
arithmetic_term: [arithmetic_factor] ((MINUS | PLUS) [arithmetic_factor])*
arithmetic_factor: [unary] ((STAR | SLASH) [unary])*
unary: (NOT | MINUS)* [call]
call: IDENTIFIER LEFT_PAREN (([inline_expression], COMMA)* [inline_expression]?) | [primary]
primary: [var] | [literal] | LEFT_PAREN inline_expression RIGHT_PAREN
type: [STAR]* (INT | BOOL | DOUBLE)
var: AMPERSAND? STAR* IDENTIFIER (DOT IDENTIFIER)* (LEFT_BRACKET inline_expression RIGHT_BRACKET)*
struct: STRUCT IDENTIFIER LEFT_CURLY ([type] IDENTIFIER SEMICOLON)*